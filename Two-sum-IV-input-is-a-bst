/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
#define HASH_SIZE 1000

struct hash_node
{
    int val;
    struct hash_node * next;
};

struct hash_node * hashtable[HASH_SIZE] = {NULL}; 

int hash_index(int val)
{
    return ((val > 0) ? (val % HASH_SIZE) : ((-1*val) % HASH_SIZE));
}

void insert_hashtable(int val)
{
    int index = hash_index(val);
    int i=0;
    struct hash_node * trav = hashtable[index];
    struct hash_node * prev = NULL;
    while(trav)
    {
        if(val == trav->val)
        {
            return; //Value already present in the hashtable
        }
        else if(val > trav->val)
        {
            prev = trav;
            trav = trav->next;
        }
        else if(val < trav->val)
        {
            struct hash_node * new_node = (struct hash_node *)malloc(sizeof(struct hash_node));
            new_node->val = val;
            new_node->next = trav;
            if(prev == NULL)    //Insertion at the head of the given index
            {
                hashtable[index] = new_node;
            }
            else
            {
                prev->next = new_node;
            }
            return;
        }
    }
    if(trav == NULL)
    {
        struct hash_node * new_node = (struct hash_node *)malloc(sizeof(struct hash_node));
        new_node->val = val;
        new_node->next = NULL;
        //No node is present in the given index
        if(prev == NULL)
        {
            hashtable[index] = new_node;
        }
        else //Insertion after the last Node
        {
            prev->next = new_node;
        }
    }
    return;
}

bool search_hashtable(int num)
{
    int index = hash_index(num);
    struct hash_node * trav = hashtable[index];
    while(trav)
    {
        if(trav->val == num)
        {
            return true;
        }
        else if(trav->val > num)
        {
            return false;
        }
        else if(trav->val < num)
        {
            trav = trav->next;
        }
    }
    return false;
}

bool traversal(struct TreeNode * root, int k)
{
    if(root)
    {
        int comp_val = k - root->val;
        if(search_hashtable(comp_val) == true)
        {
            return true;
        }

        insert_hashtable(root->val);

        bool l_val = traversal(root->left, k);
        bool r_val = traversal(root->right, k);

        return (l_val || r_val);
    }
    return false;
}

bool findTarget(struct TreeNode* root, int k) 
{
    int i=0;
    for(i=0; i<HASH_SIZE; i++)
    {
        hashtable[i] = NULL;
    }

    return traversal(root, k);
}
